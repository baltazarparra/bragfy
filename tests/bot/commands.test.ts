import {
  handleStartCommand,
  handleCallbackQuery,
  handleNewChat
} from "../../src/bot/commands";
import {
  userExists,
  createUser,
  getUserByTelegramId
} from "../../src/utils/userUtils";
import {
  createActivity,
  formatTimestamp,
  getActivitiesByPeriod
} from "../../src/utils/activityUtils";
import TelegramBot from "node-telegram-bot-api";
import { Activity } from ".prisma/client";

// Mocks para m√≥dulos e fun√ß√µes
jest.mock("../../src/utils/userUtils", () => ({
  userExists: jest.fn(),
  createUser: jest.fn(),
  getUserByTelegramId: jest.fn()
}));

jest.mock("../../src/utils/activityUtils", () => ({
  createActivity: jest.fn(),
  formatTimestamp: jest.fn(),
  getActivitiesByPeriod: jest.fn()
}));

describe("Handlers de Comando do Bot", () => {
  let mockBot: any;

  beforeEach(() => {
    // Reset todos os mocks antes de cada teste
    jest.clearAllMocks();

    // Cria um mock do bot do Telegram
    mockBot = {
      sendMessage: jest.fn().mockResolvedValue({}),
      editMessageText: jest.fn().mockResolvedValue({}),
      answerCallbackQuery: jest.fn().mockResolvedValue({})
    };

    // Configura console para n√£o poluir a sa√≠da de teste
    jest.spyOn(console, "log").mockImplementation(() => {});
    jest.spyOn(console, "error").mockImplementation(() => {});
    jest.spyOn(console, "warn").mockImplementation(() => {});
  });

  describe("handleStartCommand", () => {
    it("deve enviar mensagem de erro quando n√£o h√° dados do usu√°rio", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: undefined,
        message_id: 1,
        date: 123456789
      } as TelegramBot.Message;

      // Act
      await handleStartCommand(mockBot, msg);

      // Assert
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("N√£o foi poss√≠vel obter suas informa√ß√µes")
      );
    });

    it("deve enviar mensagem de boas-vindas para usu√°rio existente", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockResolvedValue(true);

      // Act
      await handleStartCommand(mockBot, msg);

      // Assert
      expect(userExists).toHaveBeenCalledWith(123456789);
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("Ol√° novamente, Jo√£o")
      );
    });

    it("deve criar usu√°rio e enviar mensagem para novo usu√°rio", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockResolvedValue(false);
      (createUser as jest.Mock).mockResolvedValue({
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o"
      });

      // Act
      await handleStartCommand(mockBot, msg);

      // Assert
      expect(userExists).toHaveBeenCalledWith(123456789);
      expect(createUser).toHaveBeenCalledWith(msg.from);
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("Bem-vindo ao Bragfy"),
        expect.objectContaining({ parse_mode: "Markdown" })
      );
    });

    it("deve incluir a fonte na mensagem de boas-vindas", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockResolvedValue(false);
      (createUser as jest.Mock).mockResolvedValue({
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o"
      });

      // Act
      await handleStartCommand(mockBot, msg, "instagram");

      // Assert
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("Ol√°, Jo√£o"),
        expect.any(Object)
      );
    });

    it("deve lidar com erro durante o processamento", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockRejectedValue(
        new Error("Erro no banco de dados")
      );

      // Act
      await handleStartCommand(mockBot, msg);

      // Assert
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("Ocorreu um erro ao processar seu comando")
      );
    });

    it("deve enviar mensagem de boas-vindas formatada corretamente para novos usu√°rios", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockResolvedValue(false);
      (createUser as jest.Mock).mockResolvedValue({
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o"
      });

      // Act
      await handleStartCommand(mockBot, msg);

      // Assert
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringMatching(/Ol√°, Jo√£o\./),
        expect.objectContaining({ parse_mode: "Markdown" })
      );

      // Verifica elementos espec√≠ficos na mensagem
      const welcomeMessage = mockBot.sendMessage.mock.calls[0][1];
      expect(welcomeMessage).toContain("**Brag Documents**");
      expect(welcomeMessage).toContain("*envie uma mensagem*");
      expect(welcomeMessage).toContain("*gerar brag*");
      expect(welcomeMessage).toContain("atividade");
      // N√£o deve conter emojis ou frase motivacional
      expect(welcomeMessage).not.toContain("üéâ");
      expect(welcomeMessage).not.toContain(
        "Estamos prontos quando voc√™ estiver."
      );
    });
  });

  describe("handleNewChat", () => {
    it("deve enviar mensagem de erro quando n√£o h√° dados do usu√°rio", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: undefined,
        message_id: 1,
        date: 123456789,
        text: "Minha conquista importante"
      } as TelegramBot.Message;

      // Act
      await handleNewChat(mockBot, msg);

      // Assert
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("N√£o foi poss√≠vel obter suas informa√ß√µes")
      );
    });

    it("deve pedir para usar /start quando o usu√°rio n√£o existe", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789,
        text: "Minha conquista importante"
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockResolvedValue(false);

      // Act
      await handleNewChat(mockBot, msg);

      // Assert
      expect(userExists).toHaveBeenCalledWith(123456789);
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("envie o comando /start novamente")
      );
    });

    it("deve mostrar op√ß√µes de confirma√ß√£o para mensagem de usu√°rio existente", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789,
        text: "Minha conquista importante"
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue({
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o"
      });

      // Act
      await handleNewChat(mockBot, msg);

      // Assert
      expect(userExists).toHaveBeenCalledWith(123456789);
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("Recebi sua atividade"),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({ text: "‚úÖ Confirmar" }),
                expect.objectContaining({ text: "‚úèÔ∏è Editar" }),
                expect.objectContaining({ text: "‚ùå Cancelar" })
              ])
            ])
          })
        })
      );
    });

    it("deve detectar comando /brag e mostrar op√ß√µes de per√≠odo", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789,
        text: "/brag"
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue({
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o"
      });

      // Act
      await handleNewChat(mockBot, msg);

      // Assert
      expect(userExists).toHaveBeenCalledWith(123456789);
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("Vamos gerar seu Brag Document"),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({
                  text: "üü¢ Atividades de hoje",
                  callback_data: "brag:1"
                })
              ]),
              expect.arrayContaining([
                expect.objectContaining({
                  text: "üîµ √öltimos 7 dias",
                  callback_data: "brag:7"
                })
              ]),
              expect.arrayContaining([
                expect.objectContaining({
                  text: "üü£ √öltimos 30 dias",
                  callback_data: "brag:30"
                })
              ])
            ])
          })
        })
      );
    });

    it("deve detectar comando /bragfy e mostrar op√ß√µes de per√≠odo", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789,
        text: "/bragfy"
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue({
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o"
      });

      // Act
      await handleNewChat(mockBot, msg);

      // Assert
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("Vamos gerar seu Brag Document"),
        expect.any(Object)
      );
    });

    it("deve detectar palavras-chave como 'gerar brag' e mostrar op√ß√µes de per√≠odo", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789,
        text: "gerar brag document para meu chefe"
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue({
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o"
      });

      // Act
      await handleNewChat(mockBot, msg);

      // Assert
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("Vamos gerar seu Brag Document"),
        expect.any(Object)
      );
    });

    it("deve lidar com exce√ß√µes ao processar nova mensagem", async () => {
      // Arrange
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789,
        text: "Minha conquista importante"
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockRejectedValue(
        new Error("Erro ao verificar usu√°rio")
      );

      // Act
      await handleNewChat(mockBot, msg);

      // Assert
      // Verificamos se o erro foi logado
      expect(console.error).toHaveBeenCalled();
    });

    it("deve detectar todas as varia√ß√µes de gatilhos para Brag Document corretamente", async () => {
      // Array com todas as varia√ß√µes de gatilhos que devem acionar o fluxo de brag document
      const triggers = [
        "/brag",
        "/bragfy",
        "bragfy",
        "quero um bragfy", // Teste para includes("bragfy")
        "gerar brag",
        "preciso gerar brag document",
        "gerar documento",
        "pode gerar documento para mim?",
        "gerar pdf",
        "quero gerar pdf das minhas atividades",
        "gerar relatorio",
        "preciso gerar relat√≥rio para reuni√£o"
      ];

      for (const trigger of triggers) {
        // Reset mocks para cada teste
        jest.clearAllMocks();

        // Arrange
        const msg = {
          chat: { id: 123456789 },
          from: {
            id: 123456789,
            first_name: "Jo√£o",
            is_bot: false
          },
          message_id: 1,
          date: 123456789,
          text: trigger
        } as TelegramBot.Message;

        (userExists as jest.Mock).mockResolvedValue(true);
        (getUserByTelegramId as jest.Mock).mockResolvedValue({
          id: 1,
          telegramId: 123456789,
          firstName: "Jo√£o"
        });

        // Act
        await handleNewChat(mockBot, msg);

        // Assert - cada gatilho deve mostrar as op√ß√µes de per√≠odo
        expect(mockBot.sendMessage).toHaveBeenCalledWith(
          123456789,
          expect.stringContaining("Vamos gerar seu Brag Document"),
          expect.objectContaining({
            reply_markup: expect.objectContaining({
              inline_keyboard: expect.arrayContaining([
                expect.arrayContaining([
                  expect.objectContaining({ callback_data: "brag:1" })
                ]),
                expect.arrayContaining([
                  expect.objectContaining({ callback_data: "brag:7" })
                ]),
                expect.arrayContaining([
                  expect.objectContaining({ callback_data: "brag:30" })
                ])
              ])
            })
          })
        );
      }
    });

    it("deve processar callback 'brag:X' corretamente para diferentes per√≠odos", async () => {
      // Testar cada per√≠odo
      const periods = [1, 7, 30];

      for (const period of periods) {
        // Reset mocks para cada teste
        jest.clearAllMocks();

        // Arrange
        const callbackQuery = {
          id: "123",
          from: {
            id: 123456789,
            first_name: "Jo√£o",
            is_bot: false
          },
          message: {
            chat: { id: 123456789 },
            message_id: 456,
            date: 123456789
          },
          data: `brag:${period}`,
          chat_instance: "123"
        } as TelegramBot.CallbackQuery;

        const mockUser = {
          id: 1,
          telegramId: 123456789,
          firstName: "Jo√£o"
        };

        // Simulamos 2 atividades para cada per√≠odo
        const mockActivities = [
          {
            id: 42,
            content: "Atividade 1 para teste",
            date: new Date("2025-03-27T14:30:45Z"),
            userId: 1
          },
          {
            id: 43,
            content: "Atividade 2 para teste",
            date: new Date("2025-03-26T10:15:20Z"),
            userId: 1
          }
        ] as Activity[];

        (userExists as jest.Mock).mockResolvedValue(true);
        (getUserByTelegramId as jest.Mock).mockResolvedValue(mockUser);
        (getActivitiesByPeriod as jest.Mock).mockResolvedValue(mockActivities);
        (formatTimestamp as jest.Mock).mockReturnValue("27/03/2025 15:30:45");

        // Act
        await handleCallbackQuery(mockBot, callbackQuery);

        // Assert
        // 1. Verifica se a mensagem de "Gerando..." foi exibida
        expect(mockBot.editMessageText).toHaveBeenNthCalledWith(
          1,
          expect.stringContaining(
            `Gerando seu Brag Document para os √∫ltimos ${period} dia(s)`
          ),
          expect.any(Object)
        );

        // 2. Verifica se o per√≠odo correto foi passado para getActivitiesByPeriod
        expect(getActivitiesByPeriod).toHaveBeenCalledWith(1, period);

        // 3. Verifica se o documento foi gerado e formatado corretamente
        expect(mockBot.editMessageText).toHaveBeenNthCalledWith(
          2,
          expect.stringMatching(/\| üìÖ \*Timestamp\* \| üìù \*Atividade\* \|/),
          expect.objectContaining({
            parse_mode: "Markdown"
          })
        );

        // 4. Verifica se o callback foi respondido
        expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
          "123",
          expect.objectContaining({
            text: "Documento gerado!"
          })
        );
      }
    });

    it("deve gerar Brag Document completo a partir de gatilho 'gerar brag'", async () => {
      // 1. Simula o gatilho inicial "gerar brag"
      const msg = {
        chat: { id: 123456789 },
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message_id: 1,
        date: 123456789,
        text: "gerar brag"
      } as TelegramBot.Message;

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue({
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o",
        lastName: "Silva",
        username: "joaozinho"
      });

      // Aciona o gatilho inicial
      await handleNewChat(mockBot, msg);

      // Verifica se o bot mostrou as op√ß√µes de per√≠odo
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("Vamos gerar seu Brag Document"),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({ callback_data: "brag:7" })
              ])
            ])
          })
        })
      );

      // 2. Simula a sele√ß√£o do per√≠odo (callback brag:7)
      jest.clearAllMocks(); // Reseta os mocks para a pr√≥xima etapa

      const callbackQuery = {
        id: "123",
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message: {
          chat: { id: 123456789 },
          message_id: 456,
          date: 123456789
        },
        data: "brag:7",
        chat_instance: "123"
      } as TelegramBot.CallbackQuery;

      // Configura mock para atividades com casos de borda de Markdown
      const mockActivities = [
        {
          id: 42,
          content: "Implementei funcionalidade *destacada* com _it√°lico_",
          date: new Date("2025-03-27T14:30:45Z"),
          userId: 1
        },
        {
          id: 43,
          content: "Corrigido bug no link: [teste](https://exemplo.com)",
          date: new Date("2025-03-26T10:15:20Z"),
          userId: 1
        }
      ] as Activity[];

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue({
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o",
        lastName: "Silva",
        username: "joaozinho"
      });
      (getActivitiesByPeriod as jest.Mock).mockResolvedValue(mockActivities);
      (formatTimestamp as jest.Mock).mockReturnValue("27/03/2025 15:30:45");

      // Aciona o callback
      await handleCallbackQuery(mockBot, callbackQuery);

      // 3. Verifica o fluxo completo de gera√ß√£o do documento

      // Verifica se enviou mensagem "Gerando..."
      expect(mockBot.editMessageText).toHaveBeenNthCalledWith(
        1,
        expect.stringContaining("Gerando seu Brag Document"),
        expect.objectContaining({
          chat_id: 123456789,
          message_id: 456
        })
      );

      // Verifica se buscou atividades no per√≠odo correto
      expect(getActivitiesByPeriod).toHaveBeenCalledWith(1, 7);

      // Verifica se gerou o documento formatado com parse_mode: "Markdown"
      expect(mockBot.editMessageText).toHaveBeenNthCalledWith(
        2,
        expect.stringMatching(/üë§ \*Nome\*: Jo√£o Silva/),
        expect.objectContaining({
          chat_id: 123456789,
          message_id: 456,
          parse_mode: "Markdown"
        })
      );

      // Verifica se escapou corretamente caracteres especiais do Markdown
      const documentContent = mockBot.editMessageText.mock.calls[1][0];
      expect(documentContent).toContain("\\*destacada\\* com \\_it√°lico\\_");
      expect(documentContent).toContain(
        "\\[teste\\]\\(https://exemplo\\.com\\)"
      );

      // Verifica se a tabela de atividades est√° formatada corretamente
      expect(documentContent).toContain("| üìÖ *Timestamp* | üìù *Atividade* |");
      expect(documentContent).toContain("|---------------|----------------|");

      // Verifica se enviou resposta para o callback
      expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
        "123",
        expect.objectContaining({
          text: "Documento gerado!"
        })
      );
    });
  });

  describe("handleCallbackQuery", () => {
    it("deve retornar se os dados do callback estiverem incompletos", async () => {
      // Arrange
      const callbackQuery = {
        id: "123",
        from: { id: 123456789, is_bot: false, first_name: "Jo√£o" },
        message: undefined,
        data: "confirm:teste",
        chat_instance: "123"
      } as unknown as TelegramBot.CallbackQuery;

      // Act
      await handleCallbackQuery(mockBot, callbackQuery);

      // Assert
      expect(mockBot.editMessageText).not.toHaveBeenCalled();
      expect(mockBot.answerCallbackQuery).not.toHaveBeenCalled();
    });

    it("deve confirmar e salvar atividade", async () => {
      // Arrange
      const callbackQuery = {
        id: "123",
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message: {
          chat: { id: 123456789 },
          message_id: 456,
          date: 123456789
        },
        data: "confirm:Implementei uma nova funcionalidade",
        chat_instance: "123"
      } as TelegramBot.CallbackQuery;

      const mockUser = {
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o"
      };

      const mockActivity = {
        id: 42,
        content: "Implementei uma nova funcionalidade",
        date: new Date("2025-03-27T15:30:45Z"),
        userId: 1
      };

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue(mockUser);
      (createActivity as jest.Mock).mockResolvedValue(mockActivity);
      (formatTimestamp as jest.Mock).mockReturnValue("27/03/2025 15:30:45");

      // Act
      await handleCallbackQuery(mockBot, callbackQuery);

      // Assert
      expect(userExists).toHaveBeenCalledWith(123456789);
      expect(getUserByTelegramId).toHaveBeenCalledWith(123456789);
      expect(createActivity).toHaveBeenCalledWith(
        1,
        "Implementei uma nova funcionalidade"
      );
      expect(formatTimestamp).toHaveBeenCalledWith(mockActivity.date);
      expect(mockBot.editMessageText).toHaveBeenCalledWith(
        expect.stringContaining("Atividade registrada com sucesso"),
        expect.objectContaining({
          chat_id: 123456789,
          message_id: 456
        })
      );
      expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
        "123",
        expect.any(Object)
      );
    });

    it("deve lidar com edi√ß√£o", async () => {
      // Arrange
      const callbackQuery = {
        id: "123",
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message: {
          chat: { id: 123456789 },
          message_id: 456,
          date: 123456789
        },
        data: "edit",
        chat_instance: "123"
      } as TelegramBot.CallbackQuery;

      // Act
      await handleCallbackQuery(mockBot, callbackQuery);

      // Assert
      expect(mockBot.editMessageText).toHaveBeenCalledWith(
        expect.stringContaining("envie sua mensagem corrigida"),
        expect.objectContaining({
          chat_id: 123456789,
          message_id: 456
        })
      );
      expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith("123");
    });

    it("deve lidar com cancelamento", async () => {
      // Arrange
      const callbackQuery = {
        id: "123",
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message: {
          chat: { id: 123456789 },
          message_id: 456,
          date: 123456789
        },
        data: "cancel",
        chat_instance: "123"
      } as TelegramBot.CallbackQuery;

      // Act
      await handleCallbackQuery(mockBot, callbackQuery);

      // Assert
      expect(mockBot.editMessageText).toHaveBeenCalledWith(
        expect.stringContaining("cancelado"),
        expect.objectContaining({
          chat_id: 123456789,
          message_id: 456
        })
      );
      expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith("123");
    });

    it("deve lidar com erro quando usu√°rio n√£o √© encontrado", async () => {
      // Arrange
      const callbackQuery = {
        id: "123",
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message: {
          chat: { id: 123456789 },
          message_id: 456,
          date: 123456789
        },
        data: "confirm:Implementei uma nova funcionalidade",
        chat_instance: "123"
      } as TelegramBot.CallbackQuery;

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue(null);

      // Act
      await handleCallbackQuery(mockBot, callbackQuery);

      // Assert
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("Erro: Usu√°rio n√£o encontrado")
      );
      // N√£o devemos esperar answerCallbackQuery neste caso
    });

    it("deve lidar com erros durante o processamento", async () => {
      // Arrange
      const callbackQuery = {
        id: "123",
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message: {
          chat: { id: 123456789 },
          message_id: 456,
          date: 123456789
        },
        data: "confirm:Implementei uma nova funcionalidade",
        chat_instance: "123"
      } as TelegramBot.CallbackQuery;

      (getUserByTelegramId as jest.Mock).mockRejectedValue(
        new Error("Erro no banco de dados")
      );

      // Act
      await handleCallbackQuery(mockBot, callbackQuery);

      // Assert
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining("Ocorreu um erro ao processar sua solicita√ß√£o")
      );
    });

    it("deve gerar brag document para o per√≠odo de 1 dia", async () => {
      // Arrange
      const callbackQuery = {
        id: "123",
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message: {
          chat: { id: 123456789 },
          message_id: 456,
          date: 123456789
        },
        data: "brag:1",
        chat_instance: "123"
      } as TelegramBot.CallbackQuery;

      const mockUser = {
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o",
        lastName: "Silva",
        username: "joaosilva"
      };

      const mockActivities = [
        {
          id: 42,
          content: "Implementei uma nova funcionalidade",
          date: new Date("2025-03-27T15:30:45Z"),
          userId: 1
        },
        {
          id: 43,
          content: "Corrigi bug cr√≠tico",
          date: new Date("2025-03-27T10:15:20Z"),
          userId: 1
        }
      ] as Activity[];

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue(mockUser);
      (getActivitiesByPeriod as jest.Mock).mockResolvedValue(mockActivities);
      (formatTimestamp as jest.Mock).mockReturnValue("27/03/2025 15:30:45");

      // Act
      await handleCallbackQuery(mockBot, callbackQuery);

      // Assert
      expect(userExists).toHaveBeenCalledWith(123456789);
      expect(getUserByTelegramId).toHaveBeenCalledWith(123456789);
      expect(getActivitiesByPeriod).toHaveBeenCalledWith(1, 1);

      // Verificar se a mensagem de "gerando" foi enviada primeiro
      expect(mockBot.editMessageText).toHaveBeenCalledWith(
        expect.stringContaining("Gerando seu Brag Document"),
        expect.objectContaining({
          chat_id: 123456789,
          message_id: 456
        })
      );

      // Verificar se o documento formatado foi enviado depois
      const secondCallArgs = mockBot.editMessageText.mock.calls[1];
      expect(secondCallArgs[0]).toContain("Nome");
      expect(secondCallArgs[0]).toContain("Jo√£o Silva");
      expect(secondCallArgs[0]).toContain("Username");
      expect(secondCallArgs[0]).toContain("@joaosilva");
      expect(secondCallArgs[0]).toContain(
        "| üìÖ *Timestamp* | üìù *Atividade* |"
      );

      // Verifica que a op√ß√£o de parse_mode est√° correta
      expect(secondCallArgs[1]).toEqual(
        expect.objectContaining({
          chat_id: 123456789,
          message_id: 456,
          parse_mode: "Markdown"
        })
      );

      expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
        "123",
        expect.any(Object)
      );
    });

    it("deve mostrar mensagem quando n√£o h√° atividades no per√≠odo", async () => {
      // Arrange
      const callbackQuery = {
        id: "123",
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message: {
          chat: { id: 123456789 },
          message_id: 456,
          date: 123456789
        },
        data: "brag:7",
        chat_instance: "123"
      } as TelegramBot.CallbackQuery;

      const mockUser = {
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o"
      };

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue(mockUser);
      (getActivitiesByPeriod as jest.Mock).mockResolvedValue([]);

      // Act
      await handleCallbackQuery(mockBot, callbackQuery);

      // Assert
      expect(getActivitiesByPeriod).toHaveBeenCalledWith(1, 7);

      // Verificar segunda chamada com mensagem de sem atividades
      const secondCallArgs = mockBot.editMessageText.mock.calls[1];
      expect(secondCallArgs[0]).toContain("n√£o encontrei nenhuma atividade");

      expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
        "123",
        expect.objectContaining({
          text: "Nenhuma atividade encontrada"
        })
      );
    });

    it("deve lidar com erro ao gerar brag document", async () => {
      // Arrange
      const callbackQuery = {
        id: "123",
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message: {
          chat: { id: 123456789 },
          message_id: 456,
          date: 123456789
        },
        data: "brag:30",
        chat_instance: "123"
      } as TelegramBot.CallbackQuery;

      const mockUser = {
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o"
      };

      const dbError = new Error("Erro ao buscar atividades");

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue(mockUser);
      (getActivitiesByPeriod as jest.Mock).mockRejectedValue(dbError);

      // Act
      await handleCallbackQuery(mockBot, callbackQuery);

      // Assert
      expect(getActivitiesByPeriod).toHaveBeenCalledWith(1, 30);
      expect(console.error).toHaveBeenCalled();

      expect(mockBot.editMessageText).toHaveBeenCalledWith(
        expect.stringContaining("ocorreu um erro ao gerar seu Brag Document"),
        expect.objectContaining({
          chat_id: 123456789,
          message_id: 456
        })
      );

      expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
        "123",
        expect.objectContaining({
          text: "Erro ao gerar documento"
        })
      );
    });

    it("deve escapar caracteres especiais Markdown em atividades no Brag Document", async () => {
      // Arrange
      const callbackQuery = {
        id: "123",
        from: {
          id: 123456789,
          first_name: "Jo√£o",
          is_bot: false
        },
        message: {
          chat: { id: 123456789 },
          message_id: 456,
          date: 123456789
        },
        data: "brag:7",
        chat_instance: "123"
      } as TelegramBot.CallbackQuery;

      const mockUser = {
        id: 1,
        telegramId: 123456789,
        firstName: "Jo√£o"
      };

      // Atividade com caracteres especiais do Markdown
      const mockActivities = [
        {
          id: 42,
          content: "Implementei *estrelas* e _it√°lico_ no projeto",
          date: new Date("2025-03-27T15:30:45Z"),
          userId: 1
        },
        {
          id: 43,
          content: "Corrigido bug no [link](https://exemplo.com)",
          date: new Date("2025-03-26T10:15:20Z"),
          userId: 1
        }
      ] as Activity[];

      (userExists as jest.Mock).mockResolvedValue(true);
      (getUserByTelegramId as jest.Mock).mockResolvedValue(mockUser);
      (getActivitiesByPeriod as jest.Mock).mockResolvedValue(mockActivities);
      (formatTimestamp as jest.Mock).mockReturnValue("27/03/2025 15:30:45");

      // Act
      await handleCallbackQuery(mockBot, callbackQuery);

      // Assert
      // Verifica se a fun√ß√£o de escape foi chamada para cada atividade
      const secondCallArgs = mockBot.editMessageText.mock.calls[1][0];

      // Verifica se os caracteres especiais foram escapados
      expect(secondCallArgs).toContain(
        "Implementei \\*estrelas\\* e \\_it√°lico\\_"
      );
      expect(secondCallArgs).toContain(
        "Corrigido bug no \\[link\\]\\(https://exemplo\\.com\\)"
      );
    });
  });
});
