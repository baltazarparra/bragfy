import TelegramBot from "node-telegram-bot-api";
import {
  userExists,
  createUser,
  getUserByTelegramId
} from "../utils/userUtils";
import {
  createActivity,
  formatTimestamp,
  getActivitiesByPeriod
} from "../utils/activityUtils";
import { Activity } from ".prisma/client";

/**
 * Mapeia fontes de tr√°fego para mensagens personalizadas
 */
const sourceMessages: Record<string, string> = {
  landing: "p√°gina de destino",
  instagram: "Instagram",
  facebook: "Facebook",
  linkedin: "LinkedIn",
  twitter: "Twitter"
};

/**
 * Handler para o comando /start
 */
export const handleStartCommand = async (
  bot: TelegramBot,
  msg: TelegramBot.Message,
  source?: string
) => {
  try {
    const chatId = msg.chat.id;
    const telegramUser = msg.from;

    // Loga a fonte de tr√°fego, se existir
    if (source) {
      console.log(
        `Usu√°rio com id ${chatId} acessou atrav√©s da fonte: ${source}`
      );
    }

    if (!telegramUser) {
      bot.sendMessage(
        chatId,
        "N√£o foi poss√≠vel obter suas informa√ß√µes. Por favor, tente novamente."
      );
      return;
    }

    // Verifica se o usu√°rio j√° existe
    const exists = await userExists(telegramUser.id);

    if (exists) {
      // Usu√°rio j√° cadastrado - mant√©m a mensagem padr√£o de reentrada
      bot.sendMessage(
        chatId,
        `Ol√° novamente, ${telegramUser.first_name}! Voc√™ j√° est√° cadastrado no Bragfy.`
      );
    } else {
      // Novo usu√°rio, vamos cadastrar
      await createUser(telegramUser);

      // Cria mensagem personalizada baseada na fonte, se dispon√≠vel
      let welcomeMessage = `Ol√°, ${telegramUser.first_name}! Bem-vindo ao Bragfy! üöÄ\n\n`;

      if (source && sourceMessages[source]) {
        welcomeMessage += `Vejo que voc√™ veio da nossa *${sourceMessages[source]}*. Que bom que nos encontrou!\n\n`;
      }

      welcomeMessage +=
        "Estou aqui para ajudar voc√™ a registrar suas conquistas profissionais e gerar um Brag Document em PDF facilmente.";

      // Envia mensagem de boas-vindas personalizada
      bot.sendMessage(chatId, welcomeMessage, { parse_mode: "Markdown" });
    }
  } catch (error) {
    console.error("Erro ao processar comando /start:", error);
    bot.sendMessage(
      msg.chat.id,
      "Ocorreu um erro ao processar seu comando. Por favor, tente novamente mais tarde."
    );
  }
};

/**
 * Handler para novas mensagens de chat
 */
export const handleNewChat = async (
  bot: TelegramBot,
  msg: TelegramBot.Message
) => {
  try {
    const chatId = msg.chat.id;
    const telegramUser = msg.from;
    const messageText = msg.text || "";

    if (!telegramUser) {
      console.warn(`Mensagem recebida sem dados do usu√°rio no chat ${chatId}`);
      bot.sendMessage(
        chatId,
        "N√£o foi poss√≠vel obter suas informa√ß√µes. Por favor, use o comando /start para come√ßar."
      );
      return;
    }

    // Verifica se o usu√°rio j√° existe
    const exists = await userExists(telegramUser.id);

    if (!exists) {
      // Usu√°rio n√£o existe no banco de dados, mesmo ap√≥s /start
      console.warn(
        `Usu√°rio ${telegramUser.id} (${telegramUser.first_name}) tentou enviar mensagem mas n√£o est√° cadastrado no banco`
      );

      bot.sendMessage(
        chatId,
        `Opa! Parece que tivemos um problema ao registrar sua atividade.\nPor favor, envie o comando /start novamente para que tudo funcione direitinho üôè`
      );
      return;
    }

    // Busca o usu√°rio para garantir que ele existe antes de prosseguir
    const user = await getUserByTelegramId(telegramUser.id);

    if (!user) {
      console.warn(
        `Usu√°rio ${telegramUser.id} existe segundo userExists() mas n√£o foi encontrado por getUserByTelegramId()`
      );

      bot.sendMessage(
        chatId,
        `Opa! Parece que tivemos um problema ao registrar sua atividade.\nPor favor, envie o comando /start novamente para que tudo funcione direitinho üôè`
      );
      return;
    }

    // Verificar se √© uma solicita√ß√£o de brag document
    const msgLower = messageText.toLowerCase().trim();
    const isBragRequest =
      msgLower === "/brag" ||
      msgLower === "/bragfy" ||
      msgLower === "bragfy" ||
      msgLower.includes("gerar brag") ||
      msgLower.includes("gerar documento") ||
      msgLower.includes("gerar pdf") ||
      msgLower.includes("gerar relatorio");

    if (isBragRequest) {
      console.log(
        `Usu√°rio ${telegramUser.id} solicitou gera√ß√£o de Brag Document`
      );

      const options = {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üü¢ Atividades de hoje", callback_data: "brag:1" }],
            [{ text: "üîµ √öltimos 7 dias", callback_data: "brag:7" }],
            [{ text: "üü£ √öltimos 30 dias", callback_data: "brag:30" }]
          ]
        }
      };

      bot.sendMessage(
        chatId,
        "Vamos gerar seu Brag Document! Escolha o per√≠odo desejado:",
        options
      );
      return;
    }

    // Continua com o fluxo normal de registro de atividade
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚úÖ Confirmar", callback_data: `confirm:${messageText}` },
            { text: "‚úèÔ∏è Editar", callback_data: "edit" },
            { text: "‚ùå Cancelar", callback_data: "cancel" }
          ]
        ]
      }
    };

    console.log(`Usu√°rio ${telegramUser.id} enviou mensagem: "${messageText}"`);

    bot.sendMessage(
      chatId,
      `Recebi sua atividade:\n\n"${messageText}"\n\nDeseja confirmar, editar ou cancelar?`,
      options
    );
  } catch (error) {
    console.error("Erro ao processar nova mensagem:", error);

    // Garante que o usu√°rio sempre receba feedback, mesmo em caso de erro
    try {
      bot.sendMessage(
        msg.chat.id,
        "Ops! Ocorreu um erro ao processar sua mensagem. Por favor, tente novamente ou use o comando /start para reiniciar a conversa."
      );
    } catch (sendError) {
      console.error(
        "Erro ao enviar mensagem de erro para o usu√°rio:",
        sendError
      );
    }
  }
};

/**
 * Handler para callbacks de bot√µes inline
 */
export const handleCallbackQuery = async (
  bot: TelegramBot,
  callbackQuery: TelegramBot.CallbackQuery
) => {
  try {
    if (!callbackQuery.message || !callbackQuery.from) {
      console.warn("Dados de callback incompletos, ignorando requisi√ß√£o");
      return;
    }

    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data || "";
    const telegramUser = callbackQuery.from;

    console.log(`Callback recebido: ${data} do usu√°rio ${telegramUser.id}`);

    // Processa as diferentes a√ß√µes de callback
    if (data.startsWith("brag:")) {
      // Extrai o per√≠odo solicitado
      const period = parseInt(data.substring(5), 10);

      if (isNaN(period) || ![1, 7, 30].includes(period)) {
        console.warn(`Per√≠odo inv√°lido recebido: ${data.substring(5)}`);
        bot.answerCallbackQuery(callbackQuery.id, { text: "Per√≠odo inv√°lido" });
        return;
      }

      // Verifica primeiro se o usu√°rio existe no banco de dados
      const exists = await userExists(telegramUser.id);

      if (!exists) {
        console.warn(
          `Usu√°rio ${telegramUser.id} n√£o existe no banco mas tentou gerar brag document`
        );
        bot.sendMessage(
          chatId,
          `Opa! Parece que tivemos um problema com seu cadastro.\nPor favor, envie o comando /start novamente para que possamos gerar seu documento üôè`
        );
        bot.answerCallbackQuery(callbackQuery.id, {
          text: "Erro: cadastro n√£o encontrado"
        });
        return;
      }

      // Busca o usu√°rio no banco
      const user = await getUserByTelegramId(telegramUser.id);

      if (!user) {
        console.warn(
          `Usu√°rio ${telegramUser.id} existe segundo userExists() mas n√£o foi encontrado por getUserByTelegramId()`
        );
        bot.sendMessage(
          chatId,
          `Erro: Usu√°rio n√£o encontrado. Por favor, use o comando /start para reiniciar a conversa.`
        );
        bot.answerCallbackQuery(callbackQuery.id, { text: "Erro no cadastro" });
        return;
      }

      try {
        // Informa ao usu√°rio que o documento est√° sendo gerado
        bot.editMessageText(
          `‚è≥ Gerando seu Brag Document para os √∫ltimos ${period} dia(s)...`,
          {
            chat_id: chatId,
            message_id: messageId
          }
        );

        // Busca as atividades no per√≠odo
        const activities = await getActivitiesByPeriod(user.id, period);

        // Verifica se h√° atividades
        if (activities.length === 0) {
          bot.editMessageText(
            `Hmm, n√£o encontrei nenhuma atividade registrada nos √∫ltimos ${period} dia(s).\n\nQue tal registrar algumas conquistas agora?`,
            {
              chat_id: chatId,
              message_id: messageId
            }
          );
          bot.answerCallbackQuery(callbackQuery.id, {
            text: "Nenhuma atividade encontrada"
          });
          return;
        }

        // Constr√≥i o cabe√ßalho do documento
        let bragDocument = `üë§ *Nome*: ${user.firstName}`;
        if (user.lastName) bragDocument += ` ${user.lastName}`;
        bragDocument += "\n";

        if (user.username) {
          bragDocument += `üìõ *Username*: @${user.username}\n`;
        }

        bragDocument += `üÜî *ID*: ${user.telegramId}\n\n`;

        // Constr√≥i a tabela de atividades
        bragDocument += "| üìÖ *Timestamp* | üìù *Atividade* |\n";
        bragDocument += "|---------------|----------------|\n";

        activities.forEach((activity: Activity) => {
          const timestamp = formatTimestamp(activity.date);
          // Escapa caracteres especiais do Markdown
          const escapedContent = activity.content.replace(
            /([_*[\]()~`>#+\-=|{}.!])/g,
            "\\$1"
          );
          bragDocument += `| ${timestamp} | ${escapedContent} |\n`;
        });

        bragDocument += "\nüîÑ _Gerado em " + formatTimestamp(new Date()) + "_";

        // Envia o documento formatado
        bot.editMessageText(bragDocument, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "Markdown"
        });

        console.log(
          `Brag Document com ${activities.length} atividades gerado para o usu√°rio ${user.id}`
        );
        bot.answerCallbackQuery(callbackQuery.id, {
          text: "Documento gerado!"
        });
      } catch (error) {
        console.error("Erro ao gerar Brag Document:", error);
        bot.editMessageText(
          "Desculpe, ocorreu um erro ao gerar seu Brag Document. Por favor, tente novamente mais tarde.",
          {
            chat_id: chatId,
            message_id: messageId
          }
        );
        bot.answerCallbackQuery(callbackQuery.id, {
          text: "Erro ao gerar documento"
        });
      }
    } else if (data.startsWith("confirm:")) {
      // Extrai o conte√∫do da mensagem do callback_data
      const content = data.substring(8);

      // Verifica primeiro se o usu√°rio existe no banco de dados
      const exists = await userExists(telegramUser.id);

      if (!exists) {
        console.warn(
          `Usu√°rio ${telegramUser.id} n√£o existe no banco mas tentou confirmar atividade`
        );
        bot.sendMessage(
          chatId,
          `Opa! Parece que tivemos um problema com seu cadastro.\nPor favor, envie o comando /start novamente para que possamos registrar sua atividade üôè`
        );
        bot.answerCallbackQuery(callbackQuery.id, {
          text: "Erro: cadastro n√£o encontrado"
        });
        return;
      }

      // Busca o usu√°rio no banco
      const user = await getUserByTelegramId(telegramUser.id);

      if (!user) {
        console.warn(
          `Usu√°rio ${telegramUser.id} existe segundo userExists() mas n√£o foi encontrado por getUserByTelegramId()`
        );
        bot.sendMessage(
          chatId,
          `Erro: Usu√°rio n√£o encontrado. Por favor, use o comando /start para reiniciar a conversa.`
        );
        bot.answerCallbackQuery(callbackQuery.id, { text: "Erro no cadastro" });
        return;
      }

      try {
        // Salva a atividade
        const activity = await createActivity(user.id, content);

        // Formata e exibe o timestamp
        const timestamp = formatTimestamp(activity.date);

        // Responde ao usu√°rio
        bot.editMessageText(
          `‚úÖ Atividade registrada com sucesso!\n\nID: ${activity.id}\nData: ${timestamp}\n\nConte√∫do:\n"${content}"`,
          {
            chat_id: chatId,
            message_id: messageId
          }
        );

        console.log(
          `Atividade ${activity.id} criada para o usu√°rio ${user.id}`
        );
        bot.answerCallbackQuery(callbackQuery.id, {
          text: "Atividade registrada!"
        });
      } catch (activityError) {
        console.error("Erro ao criar atividade:", activityError);
        bot.sendMessage(
          chatId,
          "Erro ao registrar sua atividade. Por favor, tente novamente."
        );
        bot.answerCallbackQuery(callbackQuery.id, {
          text: "Erro ao registrar"
        });
      }
    } else if (data === "edit") {
      bot.editMessageText("‚úèÔ∏è Por favor, envie sua mensagem corrigida.", {
        chat_id: chatId,
        message_id: messageId
      });

      console.log(`Usu√°rio ${telegramUser.id} solicitou edi√ß√£o`);
      bot.answerCallbackQuery(callbackQuery.id);
    } else if (data === "cancel") {
      bot.editMessageText("‚ùå Registro de atividade cancelado.", {
        chat_id: chatId,
        message_id: messageId
      });

      console.log(`Usu√°rio ${telegramUser.id} cancelou atividade`);
      bot.answerCallbackQuery(callbackQuery.id);
    } else {
      console.warn(`Callback desconhecido recebido: ${data}`);
      bot.answerCallbackQuery(callbackQuery.id, { text: "A√ß√£o desconhecida" });
    }
  } catch (error) {
    console.error("Erro ao processar callback:", error);

    try {
      if (callbackQuery.message) {
        bot.sendMessage(
          callbackQuery.message.chat.id,
          "Ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente ou use /start para reiniciar."
        );
      }

      bot.answerCallbackQuery(callbackQuery.id, { text: "Ocorreu um erro" });
    } catch (sendError) {
      console.error("Erro ao enviar resposta de erro:", sendError);
    }
  }
};
